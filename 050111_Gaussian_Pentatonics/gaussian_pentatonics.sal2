;;; -*- syntax: Sal2; font-size: 16; theme: "Emacs"; -*-


print(discrete(rangauss(0.1), -1, 1, 0, 88))

process ran_gauss(reps)
with key = discrete(rangauss(0.1), -1, 1, 21, 108),
     amp = discrete(rangauss(0.8), -1, 1, 0, 127),
     wait_times = {1/16 1/8 1/4},
     rate = pick(wait_times)
until elapsed() >= reps
set key = discrete(rangauss(0.5), -1, 1, 21, 108)
set amp = discrete(rangauss(0.8), -1, 1, 0, 127)
set rate = discrete(rangauss(), -1, 1, 0, 2)
set rate = nth(wait_times, rate)
send("mp:midi", key: key, dur: rate, amp: amp)
wait rate
end

sprout(ran_gauss(100))

variable scales = {{0 1 3 5 8}  ; 1142
                   {0 1 3 5 9}  ; 1143
                   {0 1 3 7 8}  ; 1144 (pelog)
                   {0 1 4 5 8}  ; 1145
                   {0 1 4 5 9}  ; 1146
                   {0 1 4 6 8}  ; 1147
                   {0 1 4 6 9}  ; 1148
                   {0 1 4 7 8}  ; 1149
                   {0 1 4 7 9}  ; 1150 (scriabin sonata 7)
                   {0 1 4 7 10} ; 1151
                   {0 1 5 6 9}  ; 1152 
                   {0 1 5 6 10} ; 1153 (hira joshi)
                   {0 1 5 7 8}  ; 1154
                   {0 1 5 7 10} ; 1155
                   {0 1 5 7 11} ; 1156
                   {0 2 3 7 8}  ; 1157
                   {0 2 3 7 9}  ; 1158
                   {0 2 3 7 10} ; 1159
                   {0 2 4 5 8}  ; 1160
                   {0 2 4 7 8}  ; 1161
                   {0 2 4 7 9}  ; 1162
                   {0 2 4 8 11} ; 1163
                   {0 2 5 7 8}  ; 1164
                   {0 2 5 7 9}  ; 1165
                   {0 2 5 8 10} ; 1166
                   {0 2 5 9 10} ; 1167
                   {0 2 5 9 11} ; 1168
                   {0 2 6 7 9}  ; 1169
                   {0 2 6 8 11} ; 1170
                   {0 2 6 9 10} ; 1171
                   {0 2 6 9 11} ; 1172
                   {0 3 5 7 9}  ; 1173
                   {0 3 5 7 9}  ; 1174
                   {0 3 5 7 10} ; 1175
                   {0 3 5 7 11} ; 1176
                   {0 3 5 8 10} ; 1177
                   {0 3 5 9 11} ; 1178
                   {0 3 7 8 10} ; 1179
                   {0 3 7 9 10} ; 1180
                   {0 4 5 7 8}  ; 1181
                   {0 4 5 7 9}  ; 1182
                   {0 4 5 8 10} ; 1183
                   {0 4 5 8 11} ; 1184
                   {0 4 5 9 10} ; 1185
                   {0 4 5 9 11} ; 1186
                   {0 4 6 7 9}  ; 1187
                   {0 4 6 9 10} ; 1188
                   {0 4 7 9 10} ; 1189
                   {0 4 7 9 11} ; 1190
                   }   

; map scale to whole keyboard (a0 - c8)

function make_scale(scale,fundamental)
 loop with ;fundamental = 21,
           thisnote = fundamental,  ; range 21-108 (a0-c8)
           count = 0,
           lscale = {}
  until thisnote >= 108
   set thisnote += nth(scale, count)
   set count += 1
   if(thisnote < 108)
        set lscale &= thisnote
   end
   if(count >= 4)
     set fundamental += 12
     set thisnote = fundamental
     set count = 0
   end
  finally lscale
 end
end

print(make_scale(nth(scales,discrete(rangauss(0.5),-1,1,0,48))))

process ran_gauss_sieved(reps)
with fundamental_change_prob = rangauss(0.5),
     fundamental_list = {21 22 23 24 25 26 27 28 29 30 31 32},
     fundamental = discrete(rangauss(0.1), -1, 1, 0, 11),
     key = discrete(rangauss(0.1), -1, 1, 21, 108),
     amp_list = {1 1 1 36 61 61 61 71 71 84 98},
     amp = discrete(rangauss(0.8), -1, 1, 0, 10),
     sus = rangauss(0.5),
     wait_times = {1/16 1/8 1/4 1/2 1},
     rate = pick(wait_times),
     scale_change_prob = rangauss(0.5),
     scale = make_scale(nth(scales,discrete(rangauss(0.5),-1,1,0,48)), fundamental)
until elapsed() >= reps
 set fundamental_change_prob = rangauss(0.75)
 set scale_change_prob = rangauss(0.5)
 set key = discrete(rangauss(0.5), -1, 1, 0, (length(scale) - 1))
 set key = nth(scale, key)
 set amp = discrete(rangauss(0.8), -1, 1, 0, 10)
 set amp = nth(amp_list, amp)
 ;set rate = discrete(rangauss(0.5), -1, 1, 0, 4)
 ;set rate = nth(wait_times, rate)
 set rate = 1/8
 set sus = rangauss(0.5)
 if(scale_change_prob > 0.5)
  set scale = make_scale(nth(scales,discrete(rangauss(0.5),-1,1,0,48)), fundamental) 
 end
 if(fundamental_change_prob > 0.5)
   print("key change!")
   set fundamental = discrete(rangauss(0.5), -1, 1, 0, 11)
   set fundamental = nth(fundamental_list, fundamental)
   print(note(fundamental))
 end
 send("mp:midi", key: key, dur: rate, amp: amp)
 wait rate
end

discrete(rangauss(0.5), -1, 1, 0, length(make_scale(nth(scales(discrete(rangauss(0.5),-1,1,0,48))))))
length(make_scale(nth(scales(discrete(rangauss(0.5),-1,1,0,48)))))

sprout(list(ran_gauss_sieved(100), ran_gauss_sieved(100), ran_gauss_sieved(100), ran_gauss_sieved(100)), "050111_gaus_pent_0.28.mid")

; -- todo
 if(sus > 0.5)
   print("Sustain!")
   send("mp:ctrl", chan: 64, val: 127)
 end
 if(sus < -0.5)
   print("No Sustain!")
   send("mp:ctrl", chan: 64, val: 0)
 end
; --

variable interpolation = {{0 0 1 1}
{1 0 0 1}
{0 0 .5 1 1 0}
{0 0 .25 1 .75 1 1 0}
{0 1 .25 1/4 .5 1/16 .75 1/32 1 0}
{0 0 .25 1/32 .5 1/16 .75 1/4 1 1}}


process ran_gauss_sieved_tempo(reps,master_rate,tempo_sections,tempo_env)
with fundamental_change_prob = rangauss(0.5),
     fundamental_list        = {21 22 23 24 25 26 27 28 29 30 31 32},
     fundamental             = discrete(rangauss(0.1), -1, 1, 0, 11),
     key                     = discrete(rangauss(0.1), -1, 1, 21, 108),
     amp_list                = {1 1 1 36 61 61 61 71 71 84 98},
     amp                     = discrete(rangauss(0.8), -1, 1, 0, 10),
     wait_times              = {1 1/2 1/4 1/8 1/16},
     master_rate             = 1/8,
     this_rate               = 1/8,
     tempo_env               = nth(interpolation, tempo_env),
     tempo_sections          = reps / tempo_sections,
     scale_change_prob       = rangauss(0.5),
     scale                   = make_scale(nth(scales,discrete(rangauss(0.5),-1,1,0,48)), fundamental)
until elapsed() >= reps
 set this_rate = interp((elapsed() % tempo_sections) + 1),tempo_env)
 ;set this_rate = (this_rate * master_rate)
 ;set fundamental_change_prob = rangauss(0.75)
 ;set scale_change_prob = rangauss(0.5)
 ;set key = discrete(rangauss(0.5), -1, 1, 0, (length(scale) - 1))
 ;set key = nth(scale, key)
 ;set amp = discrete(rangauss(0.8), -1, 1, 0, 10)
 ;set amp = nth(amp_list, amp)
 ;if(rate < 1/16)
 ; set rate = 1
 ;end
 ;if(scale_change_prob > 0.5)
 ; set scale = make_scale(nth(scales,discrete(rangauss(0.5),-1,1,0,48)), fundamental)
 ;end
 ;if(fundamental_change_prob > 0.5)
 ;  set fundamental = discrete(rangauss(0.5), -1, 1, 0, 11)
 ;  set fundamental = nth(fundamental_list, fundamental)
 ;end
 ;send("mp:midi", key: key, dur: this_rate, amp: amp)
 ;wait this_rate
end

sprout(list(ran_gauss_sieved_tempo(100,2,0)))

sprout(list(ran_gauss_sieved_tempo(100,2,0), 
ran_gauss_sieved_tempo(100,4,1), 
ran_gauss_sieved_tempo(100,4,2), 
ran_gauss_sieved_tempo(100,6,3)))

process ran_gauss_sieved_tempo_fix(reps,master_rate,mintem,maxtem)
with fundamental_change_prob = rangauss(0.5),
     fundamental_list = {21 22 23 24 25 26 27 28 29 30 31 32},
     fundamental = discrete(rangauss(0.1), -1, 1, 0, 11),
     key = discrete(rangauss(0.1), -1, 1, 21, 108),
     amp_list = {10 10 10 36 61 61 61 71 71 84 98},
     amp = discrete(rangauss(0.8), -1, 1, 0, 10),
     sus = rangauss(0.5),
     wait_times = {1/16 1/8 1/4 1/2 1},
     this_rate = master_rate,
     ;tempo_env = nth(interpolation, tempo_env),
;x = 0,
mid = (.25 * reps) + ran( .75 * reps),
lasttem = reps - 1,
     scale_change_prob = rangauss(0.5),
     scale = make_scale(nth(scales,discrete(rangauss(0.5),-1,1,0,48)), fundamental)
;until elapsed() = reps
for x below reps
 ;set x += 1
 set fundamental_change_prob = rangauss(0.75)
 set scale_change_prob = rangauss(0.75)
 set key = discrete(rangauss(0.5), -1, 1, 0, (length(scale) - 1))
 set key = nth(scale, key)
 set amp = discrete(rangauss(0.8), -1, 1, 0, 10)
 set amp = nth(amp_list, amp)
 set this_rate = interp(x, 0, mintem, mid, maxtem, lasttem, mintem)
 set this_rate *= master_rate 

 if(scale_change_prob > 0.5)
  set scale = make_scale(nth(scales,discrete(rangauss(0.75),-1,1,0,48)), fundamental) 
 end
 if(fundamental_change_prob > 0.5)
   set fundamental = discrete(rangauss(0.75), -1, 1, 0, 11)
   set fundamental = nth(fundamental_list, fundamental)
 end
 send("mp:midi", key: key, dur: this_rate, amp: amp)
 wait this_rate
end

sprout(list(ran_gauss_sieved_tempo_fix(100,0.2,0.4,0.8)))

sprout(list(ran_gauss_sieved_tempo_fix(50,0.2,1,1/7),
ran_gauss_sieved_tempo_fix(50,0.2,1,1/23),
ran_gauss_sieved_tempo_fix(50,0.2,1,1/19),
ran_gauss_sieved_tempo_fix(50,0.2,1,1/17)), "050111_gaus_pent_tempo_0.20.mid")

process ran_gaus_meta(len,voices)
with rate = 40,
master_rate = 0.5,
mintem = 1/4,
maxtem = 1/8,
x = 0  
until x >= len 
loop for i below voices
 if(ran(1) > 0.5)
   sprout(ran_gauss_sieved_tempo_fix(rate, master_rate, mintem, maxtem), rate * pick(0, 1/5, 1/7, 1/13, 1/11, 1/19, 1/27))
 end
end
if(ran(1) > 0.75)
 set mintem = pick(1/2, 1/3, 1/4, 1/5, 1/7, 1/7, 1/7, 1/11)
 set maxtem = pick(1/2, 1/3, 1/4, 1/5, 1/7, 1/7, 1/7, 1/11)
end
print(x)
set x += 1
set rate = pick(20,40,80)
wait rate * pick(1/5, 1/7, 1/13, 1/11, 1/19, 1/27)
end

sprout(ran_gaus_meta(50,2), "050111_gaus_meta.16.mid")



